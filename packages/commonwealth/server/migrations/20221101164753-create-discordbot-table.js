'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    /**
     * Add altering commands here.
     *
     * Example:
     * await queryInterface.createTable('users', { id: Sequelize.INTEGER });
     */
    return queryInterface.sequelize.transaction(async (t) => {
      await queryInterface.createTable(
        'DiscordBotConfig',
        {
          id: {
            type: Sequelize.INTEGER,
            autoIncrement: true,
            primaryKey: true,
          }, // autogenerated
          bot_id: { type: Sequelize.STRING, allowNull: true },
          chain_id: {
            type: Sequelize.STRING,
            allowNull: false,
            references: { model: 'Chains', key: 'id' },
          },
          guild_id: { type: Sequelize.STRING, allowNull: true },
          snapshot_channel_id: { type: Sequelize.STRING, allowNull: true },
          verification_token: { type: Sequelize.STRING, allowNull: true },
          token_expiration: { type: Sequelize.DATE, allowNull: true },
          created_at: { type: Sequelize.DATE, allowNull: false },
          updated_at: { type: Sequelize.DATE, allowNull: false },
        },
        { transaction: t }
      );

      await queryInterface.addColumn(
        'Chains',
        'discord_config_id',
        {
          type: Sequelize.INTEGER,
          references: { model: 'DiscordBotConfig', key: 'id' },
        },
        { transaction: t }
      );
    });
  },

  down: async (queryInterface, Sequelize) => {
    /**
     * Add reverting commands here.
     *
     * Example:
     * await queryInterface.dropTable('users');
     */
    await queryInterface.sequelize.transaction(async (t) => {
      await queryInterface.dropTable('DiscordBotConfig', { transaction: t });
      await queryInterface.removeColumn('Chains', 'discord_config_id', {
        transaction: t,
      });
    });
  },
};
